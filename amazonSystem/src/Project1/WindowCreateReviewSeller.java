/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Project1;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Juliana
 */
public class WindowCreateReviewSeller extends javax.swing.JFrame {

    /**
     * Creates new form WindowQualifyingBuyersOfItsProducts
     */
    public void refreshSquareCreateReviewSeller(){
        
           DefaultListModel listReview = (DefaultListModel) squareListOfReviewIntheSeller.getModel();
         
           boolean haveReviewOfBuyer = false;
           int cont=0;
           for(User user : Global.userList){
                if(user.getUserName().equals(Global.userName)){
                    for(Review review : user.getListReviews()){
                        if(haveReviewOfBuyer == false){
                            haveReviewOfBuyer = true;

                        }
                        listReview.addElement(cont + ":             " + review.getBuyerName() + "            :             " + review.getStarsAmount() + "      :        " +review.getNameProduct()); 
                        cont = cont + 1;
                    }
                }

                   
            }
            if(haveReviewOfBuyer == false){
                 listReview.addElement("not exist rate to comment");
                 return;
        }
    }
    public WindowCreateReviewSeller() {
        initComponents();
        
        
        
        this.setTitle("Create Review Seller");
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        
        refreshSquareCreateReviewSeller();
     
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        squareListOfReviewIntheSeller = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        bottonDoComment = new javax.swing.JButton();
        buttonContinue = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        squareListOfReviewIntheSeller.setModel(new DefaultListModel());
        jScrollPane1.setViewportView(squareListOfReviewIntheSeller);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 321, 182));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Items to Comment");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, -1, -1));

        bottonDoComment.setText("Comment");
        bottonDoComment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottonDoCommentActionPerformed(evt);
            }
        });
        getContentPane().add(bottonDoComment, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 160, -1, -1));

        buttonContinue.setText("Continue");
        buttonContinue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonContinueActionPerformed(evt);
            }
        });
        getContentPane().add(buttonContinue, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 120, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Project1/12055294_1007424805986273_1091806738_o.jpg"))); // NOI18N
        jLabel2.setText("jLabel1");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 490, 290));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private boolean isNumericData(String amountStarTemp){
	try {
		Double.parseDouble(amountStarTemp);
		return true;
	} catch (NumberFormatException number){
		return false;
	}
    }
    
    public void commentBuyer(int positionInListOfTheReview){
        
        
        /**
         input: obtain the position of the revies in the list, position of the element in the list show in graphic interface
        output:
        restriction: 
        fuction: this method is in charge of comment a buyer, searh in the list of product and find the user
        login, obtain all the review that the user have and create a new review for each element adressed to the buyer 
        (person to do his review), this comment correspond to the rate of the buyer that buy his products.
        finally the review created is store in the principal list of review
           
         **/
 
        int cont=0;
        for(User user : Global.userList){
            if(user.getUserName().equals(Global.userName)){
              
              
                for(Review review : user.getListReviews()){
                   
                    if(cont == positionInListOfTheReview){
                        
                        String comment = JOptionPane.showInputDialog("write a comment");  
                        String amountStarTemp = JOptionPane.showInputDialog("write a calification");
                        
                 
                        if(comment.isEmpty() || amountStarTemp.isEmpty()){
                             JOptionPane.showMessageDialog(this,"you cant live black space");
                             break;
                        }
                        boolean isANumber= isNumericData(amountStarTemp);
                        
                        if(isANumber == false){
                            JOptionPane.showMessageDialog(this,"You can not enter non-numeric data");
                            return;
                        }
                        
                        else{
                            int places= amountStarTemp.length()-1;
                            if(places == 0){
                                places = places + 1;
                            }
                            
                            double amountStar = Double.parseDouble(amountStarTemp);
                            
                            if(amountStar < 1 || amountStar >5){
                                JOptionPane.showMessageDialog(this,"Please type only numbers between one and five");
                            }
                            
                            double amountStarWithRoundOff = Math.rint(amountStar*places)/places;
                            
                            System.out.println(amountStarWithRoundOff);
                            
                            String nameBuyer = review.getBuyerName();
                            String nameSeller = review.getSellerName();
                            String nameProduct = review.getNameProduct();
                            
                            int identificationOfReview = Global.reviewList.size();
                           
                            identificationOfReview = identificationOfReview + 1;
                        
                           
                            Review reviewSeller = new Review(identificationOfReview,amountStarWithRoundOff,comment,nameBuyer,nameSeller, Constant.TYPE_ESTABLISHED_FOR_DEFAULT_SELLER,nameProduct);
                              
                            Global.reviewList.add(reviewSeller);
                            
                            user.getListReviews().remove(review);
                       
                            return;
                        }
                    }
                    cont = cont + 1;
                }
            }
        }
    }
    
    private void bottonDoCommentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottonDoCommentActionPerformed
        // TODO add your handling code here:
        
        if(squareListOfReviewIntheSeller.getSelectedValue() == null){
              return;
          }  

        String elementSelected = squareListOfReviewIntheSeller.getSelectedValue().toString();
        String [] chain = elementSelected.split(":");
        int positionInListOfTheReview=  Integer.parseInt(chain[0]);
        
        commentBuyer(positionInListOfTheReview);

        DefaultListModel listModel = (DefaultListModel) squareListOfReviewIntheSeller.getModel();
        listModel.removeAllElements();

        
        refreshSquareCreateReviewSeller();

    }//GEN-LAST:event_bottonDoCommentActionPerformed

    private void buttonContinueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonContinueActionPerformed
        // TODO add your handling code here:
        User user = (User) Global.userList.get(Global.positionOfTheUser);
        
        if(user.getListReviews().isEmpty()){
            JOptionPane.showMessageDialog(this,"thanks for the process");
            WindowDesitionOfTheSeller window = new WindowDesitionOfTheSeller();
            window.setVisible(true);
            this.dispose();
        }
        else{
            JOptionPane.showMessageDialog(this,"You cant live product without comment");
        }

    }//GEN-LAST:event_buttonContinueActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WindowCreateReviewSeller.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WindowCreateReviewSeller.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WindowCreateReviewSeller.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WindowCreateReviewSeller.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WindowCreateReviewSeller().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bottonDoComment;
    private javax.swing.JButton buttonContinue;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList squareListOfReviewIntheSeller;
    // End of variables declaration//GEN-END:variables
}
