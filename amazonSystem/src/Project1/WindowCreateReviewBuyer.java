/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Project1;

import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Juliana
 */
public class WindowCreateReviewBuyer extends javax.swing.JFrame {

    /**
     * Creates new form WindowCreateReviewBuyer
     */
    
    private void refreshJlistAmountOfElementToComment(){

                /*inputs: none
        output: the information of the diferents details of the purchase copy list 
        restrictions: none
        functions: add to the squareListOfProduct the diferents detail informations of the purchase maked
        
        */
        
        DefaultListModel name = (DefaultListModel) squareListOfProduct.getModel();
       
        int position = Global.purchaseList.size();
        position = position - 1;
        
        System.out.println("largo de  purchase list : "+ Global.purchaseList.size());
        
        int cont=0;
        for(Purchase purchase : Global.copyListOfPurchase){
            System.out.println("cont: "+ cont + "   position: "+ position);
            if(cont == position ){
                System.out.println("");
                for(PurchaseDetail purchaseDetails : purchase.getListOfPurchaseDetails()){
                    name.addElement(purchaseDetails.getNameProduct()+":"+"   ID" +":"+purchaseDetails.getIdProduct()+":" + "         Vendedor"+ ": "+ purchaseDetails.getSellerUserName() );
                } 
            }
            cont = cont+1;
        }
    }
    public WindowCreateReviewBuyer() {
        initComponents();
       
                /*inputs: none
        output: Create Review Buyer will become visible above the screen
        restrictions: none
        functions: after performing various functions as focusing screen
        writing what was asked ect is sent to the methods setCopyListOfPurchase and
        refreshJlistAmountOfElementToComment
        */  
        
        this.setTitle("Create Review Buyer");
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        
              
               Global.setCopyListOfPurchase();
        
               
               refreshJlistAmountOfElementToComment();

        
        
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        squareListOfProduct = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        bottonDoComment = new javax.swing.JButton();
        buttonContinue = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        squareListOfProduct.setModel(new DefaultListModel());
        jScrollPane1.setViewportView(squareListOfProduct);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 60, 321, 182));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Items to Comment");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 15, -1, -1));

        bottonDoComment.setText("Comment");
        bottonDoComment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottonDoCommentActionPerformed(evt);
            }
        });
        getContentPane().add(bottonDoComment, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 150, -1, -1));

        buttonContinue.setText("Continue");
        buttonContinue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonContinueActionPerformed(evt);
            }
        });
        getContentPane().add(buttonContinue, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 90, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Project1/12055294_1007424805986273_1091806738_o.jpg"))); // NOI18N
        jLabel2.setText("jLabel1");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 490, 290));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    
    
    private void insertReviewInListAcocordingToTheUser(String userName, Review review){
        
                /*inputs: the user name of the user, the new review make for the user
        output: Available Product will become visible above the screen
        restrictions: none
        functions: add to the user list the new review. and add to the general 
        list of reviews (reviewList) the review
        */  
        
        int i=0;
        for(User user : Global.userList){
            if(user.getUserName().equals(userName)){
                user.getListReviews().add(review);
            }
        }
        Global.reviewList.add(review);
       
    }
    private boolean isNumericData(String amountStarTemp){
	
                /*inputs: the amount of stars of the user
        outputs: return true or false
        restrictions: none
        functions: It indicates whether a string could be converted into a number or if not possible
        */  
        
        
        try {
		Double.parseDouble(amountStarTemp);
		return true;
	} catch (NumberFormatException number){
		return false;
	}
    }
    
    private void commentAndEliminateItemInListOfPurchase(int identification){

        
                /*inputs: the identification of the product
        outputs: an error or if there are two windows for the user to type the rating and comment
        restrictions:the user cant live black spaces, the user calification have to be only numbers between one and five
        and can not enter non-numeric data
        
        functions: It asks the user to type rating and comment to make. the transfer is made
        to different methods to check whether the creation of the review is possible
        after sending a new Review to insertReviewInListAcocordingToTheUser for add the 
        comment to the user list and then the detail with the rating made 
        is removed of the purchased copy list.
        */ 
        
        
        int position = Global.purchaseList.size();
        position = position - 1;
        int cont=0;

 
        
        
        Purchase largeDetailsInPurchaseList = (Purchase) Global.purchaseList.get(position);
        
        Purchase largeDetailsInPurchaseList2 = (Purchase) Global.copyListOfPurchase.get(position);
        
        
        
        for(Purchase purchase : Global.copyListOfPurchase){
           
            if(cont == position ){
                for(PurchaseDetail purchaseDetails : purchase.getListOfPurchaseDetails()){
                    if(purchaseDetails.getIdProduct() == identification){
                
                        
                        int identificationOfReview =Global.reviewList.size();
                        identificationOfReview = identificationOfReview + 1;
                                                
                        String nameBuyer= Global.userName;
                        String nameSeller = purchaseDetails.getSellerUserName();
                        
                        String nameProduct = purchaseDetails.getNameProduct();
                        
                        String comment = JOptionPane.showInputDialog("write a comment");  
                        String amountStarTemp = JOptionPane.showInputDialog("write a calification");
                        
                 
                        if(comment.isEmpty() || amountStarTemp.isEmpty()){
                             JOptionPane.showMessageDialog(this,"you cant live black space");
                             return;
                        }
                        boolean isANumber= isNumericData(amountStarTemp);
                        
                        if(isANumber == false){
                            JOptionPane.showMessageDialog(this,"You can not enter non-numeric data");
                            return;
                        }
                        
                        else{
                            
                            int places= amountStarTemp.length()-1;
                            if(places == 0){
                                places = places + 1;
                            }
                                                
                            double amountStar = Double.parseDouble(amountStarTemp);
                            
                            if(amountStar < 1 || amountStar >5){
                                JOptionPane.showMessageDialog(this,"Please type only numbers between one and five");
                                return;
                            }
                            
                            double amountStarWithRoundOff = Math.rint(amountStar*places)/places;
                            
                            System.out.println(amountStarWithRoundOff);
                            
                            Review review = new Review(identificationOfReview,amountStarWithRoundOff,comment,nameBuyer,nameSeller, Constant.TYPE_ESTABLISHED_FOR_DEFAULT_BUYER,nameProduct);

                            insertReviewInListAcocordingToTheUser(nameSeller, review);

                            purchase.getListOfPurchaseDetails().remove(purchaseDetails);
                            
                            JOptionPane.showMessageDialog(this,"Coment Created succesfully");
                            break;
                        }
                    }
                    
                }
                break;
            }
            cont = cont + 1;
        }
        
    }
    private void bottonDoCommentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottonDoCommentActionPerformed
        
        /*inputs: none
        output: none
        restrictions: none
        functions: get the identification of the selected value. Later and send the identification 
        to the method commentAndEliminateItemInListOfPurchase.
        
        */ 
        
        if(squareListOfProduct.getSelectedValue() == null){
              return;
        }  

        String elementSelected = squareListOfProduct.getSelectedValue().toString();
        String [] chain = elementSelected.split(":");
        int identificationOfTheProduct=  Integer.parseInt(chain[2]);
        
        
        commentAndEliminateItemInListOfPurchase(identificationOfTheProduct);

        
        DefaultListModel listModel = (DefaultListModel) squareListOfProduct.getModel();
        listModel.removeAllElements();
        
        listModel.removeAllElements();
        refreshJlistAmountOfElementToComment();
        
    }//GEN-LAST:event_bottonDoCommentActionPerformed

    private void buttonContinueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonContinueActionPerformed
        
                /*inputs: none
        output: an advice for the user
        restrictions: the user cant live product without comment
        functions: if this is empty because all the comments were made properly
        so it sends the user to the window WindowBuyProduct.
        
        */ 
        
        Purchase var = (Purchase)Global.copyListOfPurchase.get(Global.purchaseList.size()-1);
        if(var.getListOfPurchaseDetails().isEmpty()){
            JOptionPane.showMessageDialog(this,"Thanks for your buy");
            WindowBuyProduct window = new WindowBuyProduct();
            window.setVisible(true);
            this.dispose();
        }
        else{
            JOptionPane.showMessageDialog(this,"You cant live product without comment");
        }
       
    }//GEN-LAST:event_buttonContinueActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WindowCreateReviewBuyer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WindowCreateReviewBuyer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WindowCreateReviewBuyer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WindowCreateReviewBuyer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WindowCreateReviewBuyer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bottonDoComment;
    private javax.swing.JButton buttonContinue;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList squareListOfProduct;
    // End of variables declaration//GEN-END:variables
}
